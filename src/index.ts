import { ipcMain, app, BrowserWindow } from 'electron';
import fs from 'fs'
import readline from 'readline'
import path from 'path'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

ipcMain.on('loadP8', (e, arg) => {
  const p = arg || path.join('/home/wesley/pico-8/tile-edit/src/extraResources','demo.p8')
  
  const promise = loadData(p)
  promise.then((c)=>e.reply('loadP8Reply', {sprites: c}))

  // promise.then((value) => {
  //   console.log("blahblahblah", value),

  //   e.reply('loadP8Reply', {"sprites" : value})
  // })
})

async function loadData(path:string) {

  const stream = fs.createReadStream(path)
  const rl = readline.createInterface({
    input: stream,
    crlfDelay: Infinity
  });

  const arr = new Array()
  let dataType = ''
  for await (const line of rl) {
    // Each line in input.txt will be successively available here as `line`.
    
    if (dataType == "sprite" && !line.startsWith("__") && line.length>0) {
        for (let i=0; i<line.length; i++) {
        arr.push(parseInt(line[i], 16))
      }
    }

    if (line.startsWith("__")) {
      dataType = ''
    }
    
    if (line.startsWith("__gfx__")) {
      dataType = "sprite"
    }
  }
  return new Uint8Array(arr)

}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
  }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.webContents.on('new-window', function(e, url) {
    e.preventDefault();
    require('electron').shell.openExternal(url);
  });

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
